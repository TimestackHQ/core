name: Deploy API 

on:
  workflow_dispatch:

env:
  AWS_REGION: ca-central-1                  
  ECR_REPOSITORY: timestack  
  ECS_SERVICE: checkin-api-v1-prod-canada         
  ECS_CLUSTER: Matador-Check-in                
  ECS_TASK_DEFINITION: .aws/Matador-Check-in-API-revision53.json
  CONTAINER_NAME: api           

permissions:
  contents: read
  
jobs:
  
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production
    
    strategy:
      matrix:
        node-version: [16.x]

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        npm i
        tsc --build .
        mv ./.dist ./ApiService/.dist
        cp -R ./ApiService/package.json ./ApiService/.dist/ApiService/package.json
        cp -R ./shared/package.json ./ApiService/.dist/shared/package.json
        cp -R ./shared/email ./ApiService/.dist/shared/email
        cd ./ApiService
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
